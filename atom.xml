<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stumbling in the Dark]]></title>
  <link href="http://zetafish.github.com/atom.xml" rel="self"/>
  <link href="http://zetafish.github.com/"/>
  <updated>2011-11-28T08:04:21+01:00</updated>
  <id>http://zetafish.github.com/</id>
  <author>
    <name><![CDATA[Zetafish (Endymion Kasanardjo)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Changing styles]]></title>
    <link href="http://zetafish.github.com/blog/2011/11/26/changing-styles/"/>
    <updated>2011-11-26T23:04:00+01:00</updated>
    <id>http://zetafish.github.com/blog/2011/11/26/changing-styles</id>
    <content type="html"><![CDATA[<p>The documentation of octopress describes
<a href="http://octopress.org/docs/theme/template/">here</a> how to change the
style of the generated files.</p>

<h2>the <HEAD></h2>

<p>The <code>&lt;HEAD&gt;</code> element is described in
<code>/source/_includes/custom/head.html</code>. Following the link to
<a href="http://google.com/webfonts">Google webfonts</a> presented me with a
whole world of fonts. How do I choose one?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My own .info domain]]></title>
    <link href="http://zetafish.github.com/blog/2011/11/26/my-own-info-domain/"/>
    <updated>2011-11-26T02:34:00+01:00</updated>
    <id>http://zetafish.github.com/blog/2011/11/26/my-own-info-domain</id>
    <content type="html"><![CDATA[<p>Today I had a day off after a looooong day of traffic jams and a gig
at the <a href="http://www.odeondespiegel.nl/home">Odeon</a> theater in Zwolle.
Anyway having a day off does not mean no sitting behind the computer.
On the contrary, now that I have the time let&#8217;s start hacking.</p>

<h3>Github</h3>

<p>First I started organizing my github projects. Some searching pointed
me in the direction of <em>Organizations</em>. A useful concept and it fitted
nicely with my plan of creating accounts per customer. So I created
some gmail accounts, one for each customer and then created parallel
accounts on github. Finally I moved the projects to the correct
organization.</p>

<h3>Personal domain</h3>

<p>Secondly I decided that it would be a cool idea to have a personal
domain point to my <a href="http://zetafish.github.com/">github blog</a> And what
I need for that is first a domain.</p>

<p>I registered the <code>endymionkasanardjo.nl</code> domain on
<a href="http://eksolutions.eu">eksolutions.eu</a> which seemed a sweet deal with
just 5 EURO for a year. However I did not immediately see how to setup
the forwarding. It turned out that forwarding costs an additional 2.40
EURO.</p>

<p>Enter <a href="http://www.godadday.com/">godaddy</a>. They offer a .info domain
for only 1.6 EURO a year. And what is more full access to DNS record
to manage forwarding myself.
<a href="http://www.google.com/support/blogger/bin/answer.py?hl=en&amp;answer=58317&amp;topic=12451">Here</a>
I found out how to set up the CNAME record with godaddy.</p>

<p>Next I set up the CNAME file for my github blog. So that github knows
what to do when someone thinks they are talking to the
endymionkasanardjo.info domain</p>

<pre><code>echo endymionkasanardjo.info &gt;&gt; source/CNAME
rake generate
rake deploy
</code></pre>

<p>Yipeeeee. I am fully online now, and you can visit me on <a href="http://endymionkasanardjo.info/">http://endymionkasanardjo.info/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web frameworks for clojure]]></title>
    <link href="http://zetafish.github.com/blog/2011/11/23/web-frameworks-for-clojure/"/>
    <updated>2011-11-23T23:37:00+01:00</updated>
    <id>http://zetafish.github.com/blog/2011/11/23/web-frameworks-for-clojure</id>
    <content type="html"><![CDATA[<p>Clojure has a number of frameworks for building web applications.</p>

<ul>
<li><a href="http://github.com/mmcgrana/ring/wiki">Ring</a> - De facto standard base
for writing web applications in Clojure.</li>
<li><a href="http://compojure.org/">Compojure</a> - small web framework with a
concise DSL to generate Ring handler functions.</li>
<li><a href="https://github.com/cgrand/moustache">Moustache</a> - micro web
framework with DSL to wire Ring handlers and middlewares</li>
<li><a href="http://www.webnoir.org/">Noir</a> - another micro web framework to
write Ring handlers and middlewares</li>
</ul>


<h2>Ring</h2>

<p>Hello world in Ring</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">hello-world</span><span class="o">.</span><span class="nv">core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">use</span> <span class="nv">ring</span><span class="o">.</span><span class="nv">adapter</span><span class="o">.</span><span class="nv">jetty</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">handler</span> <span class="p">[</span><span class="nv">request</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">:status</span> <span class="mi">200</span>
</span><span class='line'>   <span class="nv">:headers</span> <span class="p">{</span><span class="s">&quot;Content-Type&quot;</span> <span class="s">&quot;text/html&quot;</span><span class="p">}</span>
</span><span class='line'>   <span class="nv">:body</span> <span class="s">&quot;Hello World&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-jetty</span> <span class="nv">handler</span> <span class="p">{</span><span class="nv">:port</span> <span class="mi">8080</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Compojure</h2>

<p>Hello world in Compojure</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">hello-world</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="nv">compojure</span><span class="o">.</span><span class="nv">core,</span> <span class="nv">ring</span><span class="o">.</span><span class="nv">adapter</span><span class="o">.</span><span class="nv">jetty</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:require</span> <span class="p">[</span><span class="nv">compojure</span><span class="o">.</span><span class="nv">route</span> <span class="nv">:as</span> <span class="nv">route</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">main-routes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="s">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">route/not-found</span> <span class="s">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-jetty</span> <span class="nv">main-routes</span> <span class="p">{</span><span class="nv">:port</span> <span class="mi">8080</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Noir</h2>

<p>Hello world in Noir</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">my-app</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="nv">noir</span><span class="o">.</span><span class="nv">core</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:require</span> <span class="p">[</span><span class="nv">noir</span><span class="o">.</span><span class="nv">server</span> <span class="nv">:as</span> <span class="nv">server</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/welcome&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;Hello world&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">server/start</span> <span class="mi">8080</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using octopress]]></title>
    <link href="http://zetafish.github.com/blog/2011/11/01/using-octopus/"/>
    <updated>2011-11-01T00:41:00+01:00</updated>
    <id>http://zetafish.github.com/blog/2011/11/01/using-octopus</id>
    <content type="html"><![CDATA[<p>Started with <a href="http://octopress.org/">octopress</a> for creating my blog
at <a href="http://zetafish.github.com/">github</a>.</p>

<blockquote><p>Octopress is a framework designed for Jekyll static blogging engine<br/>powering Github pages</p><footer><strong>Octopress</strong><cite><a href='http://octopress.org/docs'>Documentation</a></cite></footer></blockquote>


<p>Setting up was really simple. I just followed the instructions from
the documentation and voila. In one hour a new bright and shining
blog.</p>

<p>Some interesting links:</p>

<ul>
<li><a href="http://beginrescueend.com/rvm/install/">RVM</a></li>
<li><a href="http://daringfireball.net/projects/markdown">markdown</a> for help on
the syntax of markdown</li>
</ul>


<p>Publishing is a snap, you create a new page like</p>

<pre><code>rake new_page[Some cool subject]
</code></pre>

<p>That will generate a .markdown file in your <code>source/_posts</code> folder.
After editing the file you can preview it with</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>And publishing to github is a matter of</p>

<pre><code>rake generate
rake deploy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bowling kata]]></title>
    <link href="http://zetafish.github.com/blog/2011/11/01/bowling-kata/"/>
    <updated>2011-11-01T00:41:00+01:00</updated>
    <id>http://zetafish.github.com/blog/2011/11/01/bowling-kata</id>
    <content type="html"><![CDATA[<p>The bowling kata is described
<a href="http://butunclebob.com/files/downloads/Bowling%20Game%20Kata.ppt">here</a>
by Uncle Bob. Bowling has the following rules:</p>

<ul>
<li>A game consists of 10 frames</li>
<li>In a frame a player has 2 opportunities to knock down 10 pins</li>
<li>Score for the frame is number of knocked down pins plus bonuses for
spares and strikes</li>
<li>A spare is when a player knocks down 10 in two tries</li>
<li>The bonus for a spare frame is pins knocked down in next roll</li>
<li>A strike is when a player knocks down 10 pins in the first try</li>
<li>The bonus for a strike frame is pins knocked down in next two rolls</li>
<li>In the tenth frame a player who rolls a spare or strike is allowed
to roll the extra balls to complete the bonuses.</li>
</ul>


<p>First we make a simple failing test</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">kata</span><span class="o">.</span><span class="nv">test</span><span class="o">.</span><span class="nv">bowling</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="p">[</span><span class="nv">kata</span><span class="o">.</span><span class="nv">bowling</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="p">[</span><span class="nv">clojure</span><span class="o">.</span><span class="nv">test</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">test-gutter-game</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">score-game</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is simply implemented as</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">score-game</span> <span class="p">[</span><span class="nv">rolls</span><span class="p">]</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a next test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">test-ones-game</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">20</span> <span class="p">(</span><span class="nf">score-game</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">1</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this test fails so we modify the score-game</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">score-game</span> <span class="p">[</span><span class="nv">rolls</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span> <span class="p">(</span><span class="nb">take </span><span class="mi">20</span> <span class="nv">rolls</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now add a spare</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">test-spare</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">16</span> <span class="p">(</span><span class="nf">score-game</span> <span class="p">(</span><span class="nb">concat </span><span class="p">[</span><span class="mi">5</span> <span class="mi">5</span> <span class="mi">3</span><span class="p">]</span> <span class="p">(</span><span class="nb">repeat </span><span class="mi">0</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;More to follow&#8230;</p>
]]></content>
  </entry>
  
</feed>
